// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: create_feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed AS (
    INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id) VALUES (
                                                                                   $1,
                                                                                   $2,
                                                                                   $3,
                                                                                   $4,
                                                                                   $5)
        RETURNING id, created_at, updated_at, user_id, feed_id
) SELECT inserted_feed.id, inserted_feed.created_at, inserted_feed.updated_at, inserted_feed.user_id, inserted_feed.feed_id, users.name AS user_name, feeds.name AS feed_name FROM inserted_feed INNER JOIN users ON users.id = inserted_feed.user_id INNER JOIN feeds ON feeds.id = inserted_feed.feed_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT feeds.name FROM users INNER JOIN feed_follows ON feed_follows.user_id = users.id AND users.name = $1 INNER JOIN feeds ON feed_follows.feed_id = feeds.id
`

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
