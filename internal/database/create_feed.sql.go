// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: create_feed.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getFeedFromURL = `-- name: GetFeedFromURL :one
SELECT id, created_at, updated_at, name, url, user_id, last_fetched_at FROM feeds WHERE url = $1
`

func (q *Queries) GetFeedFromURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedFromURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT feeds.name AS feedName, feeds.url AS feedURL, users.name AS userName FROM feeds INNER JOIN users ON feeds.user_id = users.id
`

type GetFeedsRow struct {
	Feedname string
	Feedurl  string
	Username string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.Feedname, &i.Feedurl, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setFeed = `-- name: SetFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id) VALUES (
                                                                           $1,
                                                                           $2,
                                                                           $3,
                                                                           $4,
                                                                           $5,
                                                                           $6
                                                                          )
RETURNING id, created_at, updated_at, name, url, user_id, last_fetched_at
`

type SetFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) SetFeed(ctx context.Context, arg SetFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, setFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.LastFetchedAt,
	)
	return i, err
}
